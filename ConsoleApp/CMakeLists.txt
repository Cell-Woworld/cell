cmake_minimum_required(VERSION 3.5)
project(ConsoleApp VERSION 1.0.0)

#########################################
## module version
########################################
list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
include(git_version)
set(GIT_HASH "")
get_git_hash(GIT_HASH)
#message(STATUS "Git hash is ${GIT_HASH}")
set(GIT_BRANCH "")
get_git_branch(GIT_BRANCH)
#message(STATUS "Git branch is ${GIT_BRANCH}")
file(STRINGS VERSION MODULE_VERSION REGEX "[0-9]+\\.[0-9]+\\.[0-9]+")
string(REGEX REPLACE "^([0-9]+)\\.[0-9]+\\.[0-9]+" "\\1" MODULE_VERSION_MAJOR "${MODULE_VERSION}")
string(REGEX REPLACE "^[0-9]+\\.([0-9])+\\.[0-9]+" "\\1" MODULE_VERSION_MINOR "${MODULE_VERSION}")
string(REGEX REPLACE "^[0-9]+\\.[0-9]+\\.([0-9]+)" "\\1" MODULE_VERSION_BUILD "${MODULE_VERSION}")
message(STATUS "${PROJECT_NAME} version: ${MODULE_VERSION}.${GIT_BRANCH}_${GIT_HASH}")

if(WIN32)
	set(CMAKE_CXX_FLAGS "-std:c++17 -D _AMD64_ -EHsc \
	-D VERSION_MAJOR=${MODULE_VERSION_MAJOR} -D VERSION_MINOR=${MODULE_VERSION_MINOR} \
	-D VERSION_BUILD=${MODULE_VERSION_BUILD} -D VERSION_REVISION=\\\"${GIT_BRANCH}_${GIT_HASH}\\\" ")
	set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -MD")
	set(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG -D_DEBUG -MDd")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /STACK:10000000")
	include_directories(../inc/)
	file(GLOB_RECURSE ${PROJECT_NAME}_SRC "src/*.c" "src/*.cpp" "proto/*.cc")
	add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_SRC})
	if(BUILD_STATIC_LIBS)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D STATIC_API")
		target_link_libraries(${PROJECT_NAME} Model)
		target_link_libraries(${PROJECT_NAME} Cell)
		target_link_libraries(${PROJECT_NAME} mtDNA)
		target_link_libraries(${PROJECT_NAME} Chromosome)
		target_link_libraries(${PROJECT_NAME} mRNA)
		target_link_libraries(${PROJECT_NAME} UnitTest)
		target_link_libraries(${PROJECT_NAME} Timer)
		target_link_libraries(${PROJECT_NAME} RNA)
		target_link_libraries(${PROJECT_NAME} debug protobufd)
		target_link_libraries(${PROJECT_NAME} optimized protobuf)
		target_link_libraries(${PROJECT_NAME} DNA)
		target_link_libraries(${PROJECT_NAME} StateMachine)
		target_link_libraries(${PROJECT_NAME} XMLParser)
		link_directories(../lib/)
	endif()
	add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND xcopy /y $<CONFIG>\\${PROJECT_NAME}.exe ..\\..\\bin\\)
elseif(APPLE)
	set(CMAKE_CXX_FLAGS "-std=c++17 -g -fPIC \
	-D VERSION_MAJOR=${MODULE_VERSION_MAJOR} -D VERSION_MINOR=${MODULE_VERSION_MINOR} \
	-D VERSION_BUILD=${MODULE_VERSION_BUILD} -D VERSION_REVISION=\\\"${GIT_BRANCH}_${GIT_HASH}\\\" ")
	set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O3")
	set(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG -D_DEBUG -O0")
	if(BUILD_STATIC_LIBS)
		set(cmake_cxx_flags "${cmake_cxx_flags} -d static_api")
		include_directories(/usr/include/ /usr/local/include/ ../inc/)
		file(GLOB_RECURSE ${PROJECT_NAME}_SRC "src/*.c" "src/*.cpp" "proto/*.cc")
		add_executable(${project_name} ${${project_name}_src})
		target_link_libraries(${PROJECT_NAME} Model)
		target_link_libraries(${PROJECT_NAME} Cell)
		target_link_libraries(${PROJECT_NAME} mtDNA)
		target_link_libraries(${PROJECT_NAME} Chromosome)
		target_link_libraries(${PROJECT_NAME} mRNA)
		target_link_libraries(${PROJECT_NAME} UnitTest)
		target_link_libraries(${PROJECT_NAME} Timer)
		target_link_libraries(${PROJECT_NAME} RNA)
		target_link_libraries(${PROJECT_NAME} debug protobufd)
		target_link_libraries(${PROJECT_NAME} optimized protobuf)
		target_link_libraries(${PROJECT_NAME} DNA)
		target_link_libraries(${PROJECT_NAME} StateMachine)
		target_link_libraries(${PROJECT_NAME} XMLParser)
		link_directories(/usr/lib/ ../lib/)
	else()
		include_directories(/usr/include/ /usr/local/include/ ../inc/)
		file(GLOB_RECURSE ${PROJECT_NAME}_SRC "src/*.c" "src/*.cpp" "proto/*.cc")
		add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_SRC})
		target_link_libraries(${PROJECT_NAME} dl)
		link_directories(/usr/lib/ ../bin/)
	endif()
	add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND cp -f $<CONFIG>/${PROJECT_NAME} ../../bin/)
elseif(UNIX)
	set(CMAKE_CXX_FLAGS "-std=c++17 -fopenmp -g -fPIC \
	-D VERSION_MAJOR=${MODULE_VERSION_MAJOR} -D VERSION_MINOR=${MODULE_VERSION_MINOR} \
	-D VERSION_BUILD=${MODULE_VERSION_BUILD} -D VERSION_REVISION=\\\"${GIT_BRANCH}_${GIT_HASH}\\\" ")
	set(CMAKE_CXX_FLAGS_RELEASE "-DNDEBUG -O3")
	set(CMAKE_CXX_FLAGS_DEBUG "-DDEBUG -D_DEBUG -O0")
	if(BUILD_STATIC_LIBS)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D STATIC_API")
		include_directories(/usr/include/ /usr/local/include/ ../inc/)
		file(GLOB_RECURSE ${PROJECT_NAME}_SRC "src/*.c" "src/*.cpp" "proto/*.cc")
		add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_SRC})
		target_link_libraries(${PROJECT_NAME} Model)
		target_link_libraries(${PROJECT_NAME} Cell)
		target_link_libraries(${PROJECT_NAME} mtDNA)
		target_link_libraries(${PROJECT_NAME} Chromosome)
		target_link_libraries(${PROJECT_NAME} mRNA)
		target_link_libraries(${PROJECT_NAME} UnitTest)
		target_link_libraries(${PROJECT_NAME} Timer)
		target_link_libraries(${PROJECT_NAME} RNA)
		target_link_libraries(${PROJECT_NAME} debug protobufd)
		target_link_libraries(${PROJECT_NAME} optimized protobuf)
		target_link_libraries(${PROJECT_NAME} DNA)
		target_link_libraries(${PROJECT_NAME} StateMachine)
		target_link_libraries(${PROJECT_NAME} XMLParser)
		link_directories(/usr/lib/ ../lib/)
	else()
		if(ANDROID)
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D __ANDROID_APP__")
		endif()
		include_directories(/usr/include/ /usr/local/include/ ../inc/)
		file(GLOB_RECURSE ${PROJECT_NAME}_SRC "src/*.c" "src/*.cpp" "proto/*.cc")
		add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_SRC})
		target_link_libraries(${PROJECT_NAME} dl)
		link_directories(/usr/lib/ ../bin/)
	endif()
	if(ANDROID)
		add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND copy /y ${PROJECT_NAME} ..\\..\\bin\\Android\\${CMAKE_ANDROID_ARCH_ABI}\\${CMAKE_BUILD_TYPE}\\)
	else()
		add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND cp -f ${PROJECT_NAME} ../../bin/)
	endif()
endif()

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
